{"remainingRequest":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js??ref--7-2!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js??ref--7-3!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\extensions\\actions.md","dependencies":[{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\extensions\\actions.md","mtime":1580497919596},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\.docusaurus\\docusaurus-plugin-content-docs\\site-docs-extensions-actions-md-d34.json","mtime":1580498142667},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580437076461},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js","mtime":1580437076458},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js","mtime":1580437091490},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js","mtime":1580437090921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iQzpcXFVzZXJzXFx0aGVvZFxcT25lRHJpdmVcXERvY3VtZW50c1xcR2l0SHViXFxzdGFuZGFyZG5vdGVzXFxuZXdkb2NzXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2FjdGlvbnMnLHRpdGxlOidBY3Rpb25zJyxzaWRlYmFyX2xhYmVsOidBY3Rpb25zJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsiaWQiOiJleHRlbnNpb25zL2FjdGlvbnMiLCJ0aXRsZSI6IkFjdGlvbnMiLCJkZXNjcmlwdGlvbiI6IkFjdGlvbnMgYXJlIG1lbnUtYmFzZWQgZXh0ZW5zaW9ucyB0aGF0IGFsbG93IHlvdSB0byBidWlsZCBzaW1wbGUgQVBJcyB0aGF0IGRvIG5vdCByZXF1aXJlIGEgdXNlciBpbnRlcmZhY2UuIEFjdGlvbnMgaGF2ZSB0aGUgcG93ZXIgdG8gcmVjZWl2ZSB0aGUgd29ya2luZyBub3RlIGFuZCBtb2RpZnkgaXQuIFdlIHVzZSBhY3Rpb25zIGZvciBvdXIgTm90ZSBIaXN0b3J5IGV4dGVuc2lvbiwgYXMgd2VsbCBhcyBMaXN0ZWQgYW5kIEZpbGUgQXR0YWNobWVudHMuXHIiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzXFxleHRlbnNpb25zXFxhY3Rpb25zLm1kIiwicGVybWFsaW5rIjoiL25ld2RvY3MvZG9jcy9leHRlbnNpb25zL2FjdGlvbnMiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkbm90ZXMvbmV3ZG9jcy9kb2NzL2V4dGVuc2lvbnMvYWN0aW9ucy5tZCIsInNpZGViYXJfbGFiZWwiOiJBY3Rpb25zIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJUaGVtZXMiLCJwZXJtYWxpbmsiOiIvbmV3ZG9jcy9kb2NzL2V4dGVuc2lvbnMvdGhlbWVzIn0sIm5leHQiOnsidGl0bGUiOiJQdWJsaXNoaW5nIiwicGVybWFsaW5rIjoiL25ld2RvY3MvZG9jcy9leHRlbnNpb25zL3B1Ymxpc2hpbmcifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTonQnVpbGRpbmcgYW4gQWN0aW9uJyxpZDonYnVpbGRpbmctYW4tYWN0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidJbnN0YWxsaW5nIGFuIEFjdGlvbicsaWQ6J2luc3RhbGxpbmctYW4tYWN0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidBY3Rpb24gUG90ZW50aWFsJyxpZDonYWN0aW9uLXBvdGVudGlhbCcsY2hpbGRyZW46W119XTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLGBBY3Rpb25zIGFyZSBtZW51LWJhc2VkIGV4dGVuc2lvbnMgdGhhdCBhbGxvdyB5b3UgdG8gYnVpbGQgc2ltcGxlIEFQSXMgdGhhdCBkbyBub3QgcmVxdWlyZSBhIHVzZXIgaW50ZXJmYWNlLiBBY3Rpb25zIGhhdmUgdGhlIHBvd2VyIHRvIHJlY2VpdmUgdGhlIHdvcmtpbmcgbm90ZSBhbmQgbW9kaWZ5IGl0LiBXZSB1c2UgYWN0aW9ucyBmb3Igb3VyIE5vdGUgSGlzdG9yeSBleHRlbnNpb24sIGFzIHdlbGwgYXMgTGlzdGVkIGFuZCBGaWxlIEF0dGFjaG1lbnRzLmApLG1keCgiaDIiLHsiaWQiOiJidWlsZGluZy1hbi1hY3Rpb24ifSxgQnVpbGRpbmcgYW4gQWN0aW9uYCksbWR4KCJwIixudWxsLGBCdWlsZGluZyBhbiBhY3Rpb24tYmFzZWQgZXh0ZW5zaW9uIGNhbiBiZSBkb25lIHRocm91Z2ggYW55IGJhY2tlbmQgc3lzdGVtIG9mIHlvdXIgY2hvb3NpbmcuIFdlIHVzZSBSYWlscyB0byBidWlsZCB0aGUgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkbm90ZXMvbGlzdGVkIn0pLGBMaXN0ZWRgKSxgIGV4dGVuc2lvbiwgd2hpY2ggYWxsb3dzIHlvdSB0byBjcmVhdGUgYW5kIG1hbmFnZSBhIGJsb2dnaW5nIHB1YmxpY2F0aW9uIGZyb20geW91ciBub3Rlcy5gKSxtZHgoInAiLG51bGwsYEluIHRoaXMgZXhhbXBsZSwgd2UnbGwgcmVjcmVhdGUgYSBzaW1wbGUgY2xvbmUgb2YgTGlzdGVkLmApLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxgR2VuZXJhdGUgYSBzZWNyZXQgaW5zdGFsbGF0aW9uIGxpbmsgZm9yIHRoZSB1c2VyLmApLG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYFRoZSBzZWNyZXQgaW5zdGFsbGF0aW9uIGxpbmsgd2lsbCBjb250YWluIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIHNlY3JldCBrZXkgdGhhdCBhdXRoZW50aWNhdGVzIHRoZSB1c2VyIHRvIHRoZSBzZXJ2ZXIuIFRoZSB1c2VyIG5lZWQgb25seSBjb3B5IHRoZSByZXN1bHRpbmcgbGluayBpbnRvIFN0YW5kYXJkIE5vdGVzLCBhbmQgaXQgaXMgdGhlbiByZW1lbWJlcmVkIGF1dG9tYXRpY2FsbHkgYW5kIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIGV2ZXJ5IHN1YnNlcXVlbnQgcmVxdWVzdC5gKSxtZHgoInByZSIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1ydWJ5In0pLGBhdXRob3IgPSBBdXRob3IubmV3CnNlY3JldCA9ICBEaWdlc3Q6OlNIQTI1Ni5oZXhkaWdlc3QoU2VjdXJlUmFuZG9tLmhleCkKc2VjcmV0X3VybCA9IENHSS5lc2NhcGUoIiN7RU5WWydIT1NUJ119L2F1dGhvcnMvI3thdXRob3IuaWR9L2V4dGVuc2lvbi8/c2VjcmV0PSN7c2VjcmV0fSZ0eXBlPXNuIikKYCkpLG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYERpc3BsYXkgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBzZWNyZXRfdXJsYCksYCB0byB0aGUgdXNlciBhbmQgaW5zdHJ1Y3QgdGhlbSB0byBpbnN0YWxsIHRoZSB1cmwgaW4gU3RhbmRhcmQgTm90ZXMsIHZpYSB0aGUgRXh0ZW5zaW9ucyBtZW51IGluIHRoZSBsb3dlciBsZWZ0IGNvcm5lci5gKSksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxgV2hlbmV2ZXIgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSAiQWN0aW9ucyIgbWVudSB3aXRoaW4gU3RhbmRhcmQgTm90ZXMsIFNOIHdpbGwgbWFrZSBhIEdFVCByZXF1ZXN0IHRvIHRoZSB1c2VyJ3Mgc2VjcmV0IFVSTC4gSXQgaXMgaGVyZSB0aGF0IHlvdSByZXR1cm4gYSBKU09OIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNvbWUgbWV0YWRhdGEgYW5kIGFwcGxpY2FibGUgYWN0aW9ucy5gKSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LGBIZXJlIGlzIHdoYXQgTGlzdGVkIGhhbmRsZXMgdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBleHRlbnNpb25gKSxgIGVuZHBvaW50IHRoYXQgaXMgZW5jb2RlZCBpbiB0aGUgdXNlcidzIHNlY3JldCB1cmw6YCksbWR4KCJwcmUiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcnVieSJ9KSxgZGVmIGV4dGVuc2lvbgogIHNlY3JldCA9IHBhcmFtc1s6c2VjcmV0XQogIGl0ZW1fdXVpZCA9IHBhcmFtc1s6aXRlbV91dWlkXQoKICBuYW1lID0gIkxpc3RlZCIKICBzdXBwb3J0ZWRfdHlwZXMgPSBbIk5vdGUiXQogIGFjdGlvbnMgPSBbXQogIGlmIGl0ZW1fdXVpZAogICAgYWN0aW9ucyArPSBbCiAgICAgIHsKICAgICAgICA6bGFiZWwgPT4gIlB1Ymxpc2ggdG8gQmxvZyIsCiAgICAgICAgOnVybCA9PiAiI3tFTlZbJ0hPU1QnXX0vYXV0aG9ycy8je0BhdXRob3IuaWR9L3Bvc3RzLz91bmxpc3RlZD1mYWxzZSZzZWNyZXQ9I3tzZWNyZXR9Jml0ZW1fdXVpZD0je2l0ZW1fdXVpZH0iLAogICAgICAgIDp2ZXJiID0+ICJwb3N0IiwKICAgICAgICA6Y29udGV4dCA9PiAiSXRlbSIsCiAgICAgICAgOmNvbnRlbnRfdHlwZXMgPT4gWyJOb3RlIl0sCiAgICAgICAgOmFjY2Vzc190eXBlID0+ICJkZWNyeXB0ZWQiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICA6bGFiZWwgPT4gIk9wZW4gQmxvZyIsCiAgICAgICAgOnVybCA9PiBAYXV0aG9yLnVzZXJuYW1lICYmIEBhdXRob3IudXNlcm5hbWUubGVuZ3RoID4gMCA/IEBhdXRob3IudXJsIDogIiN7RU5WWydIT1NUJ119L2F1dGhvcnMvI3tAYXV0aG9yLmlkfSIsCiAgICAgICAgOnZlcmIgPT4gInNob3ciLAogICAgICAgIDpjb250ZXh0ID0+ICJJdGVtIiwKICAgICAgICA6Y29udGVudF90eXBlcyA9PiBbIk5vdGUiXSwKICAgICAgICA6YWNjZXNzX3R5cGUgPT4gImRlY3J5cHRlZCIKICAgICAgfSwKICAgICAgewogICAgICAgIDpsYWJlbCA9PiAiUHVibGlzaCB0byBQcml2YXRlIExpbmsiLAogICAgICAgIDp1cmwgPT4gIiN7RU5WWydIT1NUJ119L2F1dGhvcnMvI3tAYXV0aG9yLmlkfS9wb3N0cy8/dW5saXN0ZWQ9dHJ1ZSZzZWNyZXQ9I3tzZWNyZXR9Jml0ZW1fdXVpZD0je2l0ZW1fdXVpZH0iLAogICAgICAgIDp2ZXJiID0+ICJwb3N0IiwKICAgICAgICA6Y29udGV4dCA9PiAiSXRlbSIsCiAgICAgICAgOmNvbnRlbnRfdHlwZXMgPT4gWyJOb3RlIl0sCiAgICAgICAgOmFjY2Vzc190eXBlID0+ICJkZWNyeXB0ZWQiCiAgICAgIH0KICAgIF0KICBlbmQKCiAgcG9zdCA9IFBvc3QuZmluZF9ieV9pdGVtX3V1aWQoaXRlbV91dWlkKQogIGlmIHBvc3QKICAgIGFjdGlvbnMucHVzaCgKICAgIHsKICAgICAgOmxhYmVsID0+ICJPcGVuIFByaXZhdGUgTGluayIsCiAgICAgIDp1cmwgPT4gIiN7RU5WWydIT1NUJ119LyN7cG9zdC50b2tlbn0iLAogICAgICA6dmVyYiA9PiAic2hvdyIsCiAgICAgIDpjb250ZXh0ID0+ICJJdGVtIiwKICAgICAgOmNvbnRlbnRfdHlwZXMgPT4gWyJOb3RlIl0KICAgIH0pCgogICAgYWN0aW9ucy5wdXNoKAogICAgewogICAgICA6bGFiZWwgPT4gIlVucHVibGlzaCIsCiAgICAgIDp1cmwgPT4gIiN7RU5WWydIT1NUJ119L2F1dGhvcnMvI3tAYXV0aG9yLmlkfS9wb3N0cy8je3Bvc3QuaWR9L3VucHVibGlzaD9zZWNyZXQ9I3tzZWNyZXR9IiwKICAgICAgOnZlcmIgPT4gInBvc3QiLAogICAgICA6Y29udGV4dCA9PiAiSXRlbSIsCiAgICAgIDpjb250ZW50X3R5cGVzID0+IFsiTm90ZSJdCiAgICB9KQogIGVuZAoKICBhY3Rpb25zLnB1c2ggKAogIHsKICAgIDpsYWJlbCA9PiAiU2V0dGluZ3MiLAogICAgOnVybCA9PiAiI3tFTlZbJ0hPU1QnXX0vYXV0aG9ycy8je0BhdXRob3IuaWR9L3NldHRpbmdzP3NlY3JldD0je3NlY3JldH0iLAogICAgOnZlcmIgPT4gInNob3ciLAogICAgOmNvbnRleHQgPT4gIkl0ZW0iLAogICAgOmNvbnRlbnRfdHlwZXMgPT4gWyJOb3RlIl0KICB9CiAgKQoKICBkZXNjcmlwdGlvbiA9ICJQdWJsaXNoZXMgdG8gbGlzdGVkLnRvLiBSZXF1aXJlcyBkZWNyeXB0ZWQgYWNjZXNzIHRvIHB1Ymxpc2hpbmcgbm90ZS4iCiAgcmVuZGVyIDpqc29uID0+IHs6bmFtZSA9PiBuYW1lLCA6ZGVzY3JpcHRpb24gPT4gZGVzY3JpcHRpb24sIDpzdXBwb3J0ZWRfdHlwZXMgPT4gc3VwcG9ydGVkX3R5cGVzLCA6YWN0aW9ucyA9PiBhY3Rpb25zfQplbmQKYCkpLG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYEFjdGlvbnMgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6YCksbWR4KCJ0YWJsZSIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJ0aGVhZCIse3BhcmVudE5hbWU6InRhYmxlIn0sbWR4KCJ0ciIse3BhcmVudE5hbWU6InRoZWFkIn0sbWR4KCJ0aCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSksYEtleWApLG1keCgidGgiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pLGBEZXNjcmlwdGlvbmApKSksbWR4KCJ0Ym9keSIse3BhcmVudE5hbWU6InRhYmxlIn0sbWR4KCJ0ciIse3BhcmVudE5hbWU6InRib2R5In0sbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSksbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJ0ZCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InN0cm9uZyJ9LGBsYWJlbGApKSksbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSksYFdoYXQgdGhlIFVJIHdpbGwgZGlzcGxheSBmb3IgdGhpcyBhY3Rpb24uYCkpLG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToidGQifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJzdHJvbmcifSxgdXJsYCkpKSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSxgVGhlIFVSTCB0aGF0IFN0YW5kYXJkIE5vdGVzIHdpbGwgbWFrZSBhIHJlcXVlc3QgdG8gd2hlbiB0aGUgdXNlciBzZWxlY3RzIHRoaXMgYWN0aW9uLmApKSxtZHgoInRyIix7cGFyZW50TmFtZToidGJvZHkifSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InRkIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToic3Ryb25nIn0sYHZlcmJgKSkpLG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pLGBJbnN0cnVjdHMgU3RhbmRhcmQgTm90ZXMgaG93IHRvIGhhbmRsZSB0aGUgVVJMLiBUaGlzIGNhbiBiZSBvbmUgb2Y6YCkpLG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pKSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InRkIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToic3Ryb25nIn0sYHNob3dgKSksYDogU3RhbmRhcmQgTm90ZXMgd2lsbCBvcGVuIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InRkIn0sYHVybGApLGAgaW4gYSBicm93c2VyLmApKSxtZHgoInRyIix7cGFyZW50TmFtZToidGJvZHkifSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSksbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSksbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJ0ZCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InN0cm9uZyJ9LGBwb3N0YCkpLGA6IFN0YW5kYXJkIE5vdGVzIHdpbGwgbWFrZSBhIFBPU1QgcmVxdWVzdCB0byB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJ0ZCJ9LGB1cmxgKSxgIHdpdGggdGhlIGN1cnJlbnQgaXRlbSBpbmNsdWRlZCBpbiB0aGUgcGFyYW1ldGVycy5gKSksbWR4KCJ0ciIse3BhcmVudE5hbWU6InRib2R5In0sbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSkpLG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToidGQifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJzdHJvbmcifSxgZ2V0YCkpLGA6IFN0YW5kYXJkIE5vdGVzIHdpbGwgbWFrZSBhIEdFVCByZXF1ZXN0IHRvIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InRkIn0sYHVybGApLGAgYW5kIGV4cGVjdCBhbiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InRkIn0sYEl0ZW1gKSxgIGluIHJlc3BvbnNlLiBUaGUgaXRlbSB3aWxsIGJlIHVzZWQgdG8gdXBkYXRlIHRoZSBjdXJyZW50IHdvcmtpbmcgbm90ZS4gV2UgdXNlIHRoaXMgZm9yIG91ciBOb3RlIEhpc3RvcnkgZXh0ZW5zaW9uIHRvIHVwZGF0ZSB0aGUgY3VycmVudCBub3RlIHdpdGggYSBwcmV2aW91cyB2ZXJzaW9uIG9mIGl0LmApKSxtZHgoInRyIix7cGFyZW50TmFtZToidGJvZHkifSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSksbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSksbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJ0ZCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InN0cm9uZyJ9LGByZW5kZXJgKSksYDogU3RhbmRhcmQgTm90ZXMgd2lsbCBtYWtlIGEgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJ0ZCJ9LGBHRVRgKSxgIHJlcXVlc3QgdG8gdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToidGQifSxgdXJsYCksYCBhbmQgZXhwZWN0IGFuIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToidGQifSxgSXRlbWApLGAsIGJ1dCBpbnN0ZWFkIG9mIHVwZGF0aW5nIHRoZSBpdGVtLCBpdCB3aWxsIHByZXZpZXcgaXQgaW4gYSBtb2RhbC4gVGhpcyBhbGxvd3MgYSB1c2VyIHRvIHByZXZpZXcgdGhlIGNvbnRlbnRzIG9mIGFuIGluY29taW5nIGl0ZW0gYmVmb3JlIGNob29zaW5nIHRvIHJlcGxhY2UgdGhlIGN1cnJlbnQgbm90ZSB3aXRoIHdoYXRldmVyIGlzIHJldHJpZXZlZCBmcm9tIHRoZSBzZXJ2ZXIuIFdlIGFsc28gdXNlIHRoaXMgaW4gb3VyIE5vdGUgSGlzdG9yeSBleHRlbnNpb24uYCkpLG1keCgidHIiLHtwYXJlbnROYW1lOiJ0Ym9keSJ9LG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pKSxtZHgoInRkIixfZXh0ZW5kcyh7cGFyZW50TmFtZToidHIifSx7ImFsaWduIjoibGVmdCJ9KSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InRkIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToic3Ryb25nIn0sYGNvbnRleHRgKSksYDogQ29udGV4dCBzaG91bGQgbW9zdGx5IGJlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToidGQifSxgSXRlbWApLGAsIHdoaWNoIG1lYW5zIHRoYXQgdGhpcyBhY3Rpb24gYXBwbGllcyB0byBhIHBhcnRpY3VsYXIgaXRlbSwgYW5kIGlzIG5vdCBqdXN0IGEgZ2VuZXJhbCBhY3Rpb24uIEluIHRoZSBwYXN0LCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InRkIn0sYGNvbnRleHRgKSxgIGNvdWxkIHRha2Ugb24gdGhlIHZhbHVlIG9mIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToidGQifSxgZ2xvYmFsYCksYCwgd2hpY2ggbWVhbnMgaXQgaGFzIGFjdGlvbnMgYXZhaWxhYmxlIHRoYXQgYXJlIG5vdCByZWxhdGVkIHRvIGFuIGl0ZW0uIEhvd2V2ZXIsIHRoaXMgZnVuY3Rpb25hbGl0eSBpcyB1bm9mZmljaWFsbHkgZGVwcmVjYXRlZCwgd2l0aCBhbiBvZmZpY2lhbCBkZXByZWNhdGlvbiBjb21pbmcgc29vbi5gKSksbWR4KCJ0ciIse3BhcmVudE5hbWU6InRib2R5In0sbWR4KCJ0ZCIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InRyIn0seyJhbGlnbiI6ImxlZnQifSkpLG1keCgidGQiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJ0ciJ9LHsiYWxpZ24iOiJsZWZ0In0pLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToidGQifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJzdHJvbmcifSxgY29udGVudF90eXBlc2ApKSxgOiBUaGUga2luZHMgb2YgaXRlbXMgdGhpcyBhY3Rpb24gYXBwbGllcyB0by4gQ3VycmVudGx5IG9ubHkgJ05vdGUnIGFjdGlvbnMgYXJlIHN1cHBvcnRlZC4gSW4gdGhlIGZ1dHVyZSwgd2UgbWlnaHQgYWxsb3cgZm9yIGFjdGlvbnMgb24gYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InRkIn0sYFRhZ2ApLGAgb3Igb3RoZXIgY29udGVudCB0eXBlcywgYnV0IG5vIHN1Y2ggaW50ZXJmYWNlIGlzIGN1cnJlbnRseSBhdmFpbGFibGUuYCkpKSkpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sYFdoZW4gYSB1c2VyIHNlbGVjdHMgdGhlIGFjdGlvbiwgeW91ciBzZXJ2ZXIgc2hvdWxkIGJlIHJlYWR5IHRvIGhhbmRsZSB0aGF0IGVuZHBvaW50LCBhbmQgaW4gbW9zdCBjYXNlcyBleHBlY3QgYW4gaXRlbS4gSGVyZSdzIGhvdyBMaXN0ZWQgaGFuZGxlcyB0aGUgIlB1Ymxpc2ggdG8gQmxvZyIgYWN0aW9uOmApLG1keCgicHJlIix7cGFyZW50TmFtZToibGkifSxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXJ1YnkifSksYGRlZiBjcmVhdGUKICBpdGVtX3V1aWQgPSBwYXJhbXNbOml0ZW1fdXVpZF0KICBwb3N0ID0gUG9zdC5maW5kX2J5X2l0ZW1fdXVpZChpdGVtX3V1aWQpCiAgaWYgcG9zdCAmJiBwb3N0LmF1dGhvciAhPSBAYXV0aG9yCiAgICByZXR1cm4KICBlbmQKCiAgaWYgIXBvc3QKICAgIHBvc3QgPSBAYXV0aG9yLnBvc3RzLm5ldyhwb3N0X3BhcmFtcykKICBlbHNlCiAgICBwb3N0LnVwZGF0ZShwb3N0X3BhcmFtcykKICBlbmQKCiAgaXRlbSA9IHBhcmFtc1s6aXRlbXNdWzBdCiAgY29udGVudCA9IGl0ZW1bImNvbnRlbnQiXQoKICBwb3N0LnRpdGxlID0gY29udGVudFsidGl0bGUiXQogIHBvc3QudGV4dCA9IGNvbnRlbnRbInRleHQiXQogIHBvc3Quc2F2ZQplbmQKYCkpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LGBUaGF0J3MgYWJvdXQgaXQuYCkpKSxtZHgoImgyIix7ImlkIjoiaW5zdGFsbGluZy1hbi1hY3Rpb24ifSxgSW5zdGFsbGluZyBhbiBBY3Rpb25gKSxtZHgoInAiLG51bGwsYEFjdGlvbnMgaGF2ZSB0aGUgZm9sbG93aW5nIFVSTCBmb3JtYXQ6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBodHRwczovL2hvc3Qub3JnL215LWFjdGlvbj90eXBlPWFjdGlvbiZuYW1lPU15QWN0aW9uCmApKSxtZHgoImgyIix7ImlkIjoiYWN0aW9uLXBvdGVudGlhbCJ9LGBBY3Rpb24gUG90ZW50aWFsYCksbWR4KCJwIixudWxsLGBUaGVyZSBhcmUgYSBsb3Qgb2YgY29vbCB0aGluZ3MgeW91IGNhbiBidWlsZCB3aXRoIGFjdGlvbnMuIEZvciBleGFtcGxlLCB5b3UgY2FuIGJ1aWxkIGFuIGFjdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBjdXJyZW50IG5vdGUgd2hpY2ggY29uc2lzdHMgb2YgYSBidW5jaCBvZiBudW1iZXJzIHNlcGFyYXRlZCBieSBhIGNvbW1hLCBhbmQgdGhlIGFjdGlvbiBjYW4gY29tcHV0ZSB0aGUgYXZlcmFnZSwgYW5kIHJldHVybiB0aGUgbmV3IG5vdGUgY29udGVudHMgd2hpY2ggYXBwZW5kcyB0aGUgYXZlcmFnZS4gVGhpcyBpcyBhIHNpbXBsZSB1c2UgY2FzZSwgYnV0IGNhbiBiZSBlbmxhcmdlZCB0byBidWlsZCBtb3JlIHBvd2VyZnVsIGFiaWxpdGllcy5gKSxtZHgoInAiLG51bGwsYFlvdSBtaWdodCBldmVuIGJ1aWxkIGFuIGFjdGlvbiB0aGF0IGZvciBleGFtcGxlIHJlY2VpdmVzIEphdmFTY3JpcHQgY29kZSBpbiB0aGUgbm90ZSB0ZXh0LCBydW5zIHRoZSBKYXZhU2NyaXB0LCBjb21wdXRlcyB0aGUgcmVzdWx0LCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IHdoaWNoIGlzIHRoZW4gYXBwZW5kZWQgdG8gdGhlIG5vdGUgYm9keSBpbiBjcmVhdGl2ZSB3YXlzLiBUaGUgcG9zc2liaWxpdGllcyBhcmUgZW5kbGVzcy5gKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}