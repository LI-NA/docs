{"remainingRequest":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js??ref--7-2!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js??ref--7-3!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\extensions\\intro.md","dependencies":[{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\extensions\\intro.md","mtime":1580497919598},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\.docusaurus\\docusaurus-plugin-content-docs\\site-docs-extensions-intro-md-041.json","mtime":1580498142667},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580437076461},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js","mtime":1580437076458},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js","mtime":1580437091490},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js","mtime":1580437090921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iQzpcXFVzZXJzXFx0aGVvZFxcT25lRHJpdmVcXERvY3VtZW50c1xcR2l0SHViXFxzdGFuZGFyZG5vdGVzXFxuZXdkb2NzXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2ludHJvJyx0aXRsZTonSW50cm8gdG8gRXh0ZW5zaW9ucycsc2lkZWJhcl9sYWJlbDonSW50cm8gdG8gRXh0ZW5zaW9ucyd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17ImlkIjoiZXh0ZW5zaW9ucy9pbnRybyIsInRpdGxlIjoiSW50cm8gdG8gRXh0ZW5zaW9ucyIsImRlc2NyaXB0aW9uIjoiIyMgUGhpbG9zb3BoeVxyIiwic291cmNlIjoiQHNpdGUvZG9jc1xcZXh0ZW5zaW9uc1xcaW50cm8ubWQiLCJwZXJtYWxpbmsiOiIvbmV3ZG9jcy9kb2NzL2V4dGVuc2lvbnMvaW50cm8iLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3N0YW5kYXJkbm90ZXMvbmV3ZG9jcy9kb2NzL2V4dGVuc2lvbnMvaW50cm8ubWQiLCJzaWRlYmFyX2xhYmVsIjoiSW50cm8gdG8gRXh0ZW5zaW9ucyIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiUHJlY29uZmlndXJlZCBJbWFnZSIsInBlcm1hbGluayI6Ii9uZXdkb2NzL2RvY3Mvc2VsZi1ob3N0aW5nL3ByZWNvbmZpZ3VyZWQtaW1hZ2UifSwibmV4dCI6eyJ0aXRsZSI6IkJ1aWxkaW5nIGFuIEV4dGVuc2lvbiIsInBlcm1hbGluayI6Ii9uZXdkb2NzL2RvY3MvZXh0ZW5zaW9ucy9idWlsZGluZy1hbi1leHRlbnNpb24ifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTonUGhpbG9zb3BoeScsaWQ6J3BoaWxvc29waHknLGNoaWxkcmVuOltdfSx7dmFsdWU6J1N1c3RhaW5hYmlsaXR5JyxpZDonc3VzdGFpbmFiaWxpdHknLGNoaWxkcmVuOltdfSx7dmFsdWU6J1R5cGVzJyxpZDondHlwZXMnLGNoaWxkcmVuOltdfV07Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDIiLHsiaWQiOiJwaGlsb3NvcGh5In0sYFBoaWxvc29waHlgKSxtZHgoInAiLG51bGwsYFN0YW5kYXJkIE5vdGVzIGlzIGJ1aWx0IG9uIHRoZSBjb3JlIHByaW5jaXBsZSBvZiBzaW1wbGljaXR5LCBpbiBob3BlcyBvZiBvcHRpbWl6aW5nIGZvciBsb25nZXZpdHkuIFRoaXMgcmVxdWlyZXMgYSBkaWZmZXJlbnQgc29ydCBvZiBhcmNoaXRlY3R1cmUgYW5kIGxvbmctdGVybSB0aGlua2luZy4gSW4gdG9kYXkncyBlbnZpcm9ubWVudCwgYWRkaW5nIG5ldyBmZWF0dXJlcyBjYW4gYmUgYXMgZWFzeSBhcyBpbnN0YWxsaW5nIGFuIGV4dGVybmFsIGxpYnJhcnkgYW5kIGhvb2tpbmcgaXQgdXAgd2l0aCBqdXN0IGEgZmV3IGxpbmVzIG9mIGNvZGUuIEl0J3MgYWxsIHRvbyBjb21tb24gdGhhdCBkZXZlbG9wZXJzLCBpbiBob3BlcyBvZiBhdHRyYWN0aW5nIG1vcmUgYW5kIG1vcmUgdXNlcnMsIGFkZCBtb3JlIGFuZCBtb3JlIGZlYXR1cmVzIHRvIHRoZWlyIGFwcCwgdW50aWwgaW5ldml0YWJseSwgdGhlIGFwcCBibG9hdHMgdG8gb2JsaXZpb24gYW5kIGJlY29tZXMgaW1wb3NzaWJsZSB0byBtYWludGFpbi5gKSxtZHgoInAiLG51bGwsYFJhdGhlciB0aGFuIHRpZ2h0bHkgY291cGxlIGV2ZXJ5IGZlYXR1cmUgd2UgZHJlYW0gb2YgYnVpbGRpbmcgZm9yIFN0YW5kYXJkIE5vdGVzIGludG8gdGhlIGNvcmUgYXBwbGljYXRpb24gY29kZSwgd2UgY2hvc2UgdG8gZGVzaWduIFN0YW5kYXJkIE5vdGVzIHRvIGJlIHRob3JvdWdobHkgZXh0ZW5zaWJsZS4gVGhpcyBhbGxvd3MgdXMgdG8gZXhwZXJpbWVudCB3aXRoIG5ldyBmZWF0dXJlcyB3aXRob3V0IHBvbGx1dGluZyB0aGUgY29yZSBhcHBsaWNhdGlvbiBhbmQgdGhyZWF0ZW5pbmcgaXRzIHN0YWJpbGl0eSBhbmQgc3Vydml2YWJpbGl0eS5gKSxtZHgoImgyIix7ImlkIjoic3VzdGFpbmFiaWxpdHkifSxgU3VzdGFpbmFiaWxpdHlgKSxtZHgoInAiLG51bGwsYFRoZSBFeHRlbnNpb25zIG1vZGVsIGlzIGFsc28gb3VyIG1haW4gZnVuZHJhaXNpbmcgbWV0aG9kLCBhbmQgYWxsb3dzIHVzIHRvIHRvIG9mZmVyIG91ciBjb3JlIHByaXZhY3kgZXhwZXJpZW5jZSBhdCBubyBjb3N0LCB3aGlsZSBzdXN0YWluaW5nIGZ1dHVyZSBkZXZlbG9wbWVudCBieSBvZmZlcmluZyBhZHZhbmNlZCBmZWF0dXJlcyB0aHJvdWdoIG91ciBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3N0YW5kYXJkbm90ZXMub3JnL2V4dGVuZGVkIn0pLGBFeHRlbmRlZGApLGAgcHJvZ3JhbS5gKSxtZHgoInAiLG51bGwsYE1vc3Qgb2Ygb3VyIGV4dGVuc2lvbnMgYXJlIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9zbi1leHRlbnNpb25zIn0pLGBvcGVuLXNvdXJjZWApLGAgYW5kIGF2YWlsYWJsZSBmb3Igc2VsZi1ob3N0aW5nLiBZb3UgY2FuIGFsc28gbGVhcm4gdG8gZGV2ZWxvcCB5b3VyIG93biBleHRlbnNpb25zIGJ5IGZvbGxvd2luZyB0aGUgZ3VpZGVzIG9uIHRoaXMgc2l0ZS4gSG93ZXZlciwgd2UgZW5jb3VyYWdlIHlvdSB0byBzdXBwb3J0IHRoZSBzdXN0YWluYWJpbGl0eSBhbmQgZnV0dXJlIGRldmVsb3BtZW50IG9mIHRoaXMgcHJvamVjdCBieSBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3N0YW5kYXJkbm90ZXMub3JnL2V4dGVuc2lvbnMifSksYHB1cmNoYXNpbmcgYSBzdWJzY3JpcHRpb25gKSxgLmApLG1keCgiaDIiLHsiaWQiOiJ0eXBlcyJ9LGBUeXBlc2ApLG1keCgicCIsbnVsbCxgVGhlcmUgYXJlIDMgbWFpbiB0eXBlcyBvZiBleHRlbnNpb25zOmApLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxgQ29tcG9uZW50c2ApLGA6IENvbXBvbmVudHMgYXJlIHVzZXIgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgY29tcGxldGVseSBzd2FwIG91dCBhcmVhcyBvZiBTdGFuZGFyZCBOb3RlcyB3aXRoIGN1c3RvbSBiZWhhdmlvci4gQ29tcG9uZW50cyBpbmNsdWRlIGVkaXRvcnMgKHN1Y2ggYXMgdGhlIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vc3RhbmRhcmRub3Rlcy5vcmcvZXh0ZW5zaW9ucy9hZHZhbmNlZC1tYXJrZG93biJ9KSxgQWR2YW5jZWQgTWFya2Rvd24gRWRpdG9yYCksYCBhbmQgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9zdGFuZGFyZG5vdGVzLm9yZy9leHRlbnNpb25zL3BsdXMtZWRpdG9yIn0pLGBQbHVzIEVkaXRvcmApLGApLCBlZGl0b3Igc3RhY2sgY29tcG9uZW50cyAobGlrZSB0aGUgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9zdGFuZGFyZG5vdGVzLm9yZy9leHRlbnNpb25zL2FjdGlvbi1iYXIifSksYEFjdGlvbiBCYXJgKSxgIGFuZCBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3N0YW5kYXJkbm90ZXMub3JnL2V4dGVuc2lvbnMvZmlsZXNhZmUifSksYEZpbGVTYWZlYCksYCksIGFuZCBvdGhlciBjb21wb25lbnRzIChsaWtlIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vc3RhbmRhcmRub3Rlcy5vcmcvZXh0ZW5zaW9ucy9mb2xkZXJzIn0pLGBGb2xkZXJzYCksYCBhbmQgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9zdGFuZGFyZG5vdGVzLm9yZy9leHRlbnNpb25zL3F1aWNrLXRhZ3MifSksYFF1aWNrIFRhZ3NgKSxgKS5gKSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InN0cm9uZyJ9LHsiaHJlZiI6Ii9leHRlbnNpb25zL2J1aWxkaW5nLWFuLWV4dGVuc2lvbiJ9KSxgRGV2ZWxvcGluZyBhIGNvbXBvbmVudCDihpJgKSkpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGBUaGVtZXNgKSxgOiBUaGVtZXMgY2hhbmdlIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBvZiBTdGFuZGFyZCBOb3RlcywgYW5kIGFyZSBjb21wYXRpYmxlIG9uIGFsbCBwbGF0Zm9ybXMsIGluY2x1ZGluZyBkZXNrdG9wLCB3ZWIsIGFuZCBtb2JpbGUuIFNvbWUgb2Ygb3VyIG93biB0aGVtZXMgaW5jbHVkZSBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3N0YW5kYXJkbm90ZXMub3JnL2V4dGVuc2lvbnMvbWlkbmlnaHQifSksYE1pZG5pZ2h0YCksYCBhbmQgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9zdGFuZGFyZG5vdGVzLm9yZy9leHRlbnNpb25zL3NvbGFyaXplZC1kYXJrIn0pLGBTb2xhcml6ZWQgRGFya2ApLGAuYCksbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJzdHJvbmcifSx7ImhyZWYiOiIvZXh0ZW5zaW9ucy90aGVtZXMifSksYERldmVsb3BpbmcgYSB0aGVtZSDihpJgKSkpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LGBBY3Rpb25zYCksYDogQWN0aW9ucyBhcmUgYW4gQVBJLWJhc2VkIGV4dGVuc2lvbiBpbnRlcmZhY2UgdGhhdCBhcmUgYWNjZXNzaWJsZSB2aWEgdGhlIEFjdGlvbnMgbWVudSBpbiB0aGUgbm90ZSBwYW5lLiBBY3Rpb25zIGFyZSB0cmlnZ2VyZWQgbWFudWFsbHkgYnkgdGhlIHVzZXIgYnkgc2VsZWN0aW5nIGFuIGFjdGlvbiBmcm9tIHRoZSBsaXN0LCBhbmQgaGF2ZSB0aGUgYWJpbGl0eSB0byBpbnRlcmZhY2Ugd2l0aCB0aGUgY3VycmVudCBub3RlIGFuZCBzZW5kIG9yIHJldHJpZXZlIGNvbnRlbnQgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIuIFdlIHVzZSBhY3Rpb25zIGZvciBwbGFjZXMgc3VjaCBhcyBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2xpc3RlZC50byJ9KSxgTGlzdGVkYCksYCwgd2hpY2ggaXMgb3VyIGJsb2dnaW5nIHBsYXRmb3JtIGZvciBTdGFuZGFyZCBOb3RlcyB1c2Vycy5gKSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InN0cm9uZyJ9LHsiaHJlZiI6Ii9leHRlbnNpb25zL2FjdGlvbnMifSksYERldmVsb3BpbmcgYW4gYWN0aW9uIOKGkmApKSkpKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}