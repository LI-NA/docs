{"remainingRequest":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js??ref--7-2!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js??ref--7-3!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\self-hosting\\ec2-nginx.md","dependencies":[{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\self-hosting\\ec2-nginx.md","mtime":1580497919601},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\.docusaurus\\docusaurus-plugin-content-docs\\site-docs-self-hosting-ec-2-nginx-md-27e.json","mtime":1580498142667},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580437076461},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js","mtime":1580437076458},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js","mtime":1580437091490},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js","mtime":1580437090921}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}