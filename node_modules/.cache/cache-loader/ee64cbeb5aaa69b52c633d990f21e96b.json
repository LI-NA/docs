{"remainingRequest":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js??ref--7-2!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js??ref--7-3!C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\doc3.md","dependencies":[{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\docs\\doc3.md","mtime":1580679678307},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\.docusaurus\\docusaurus-plugin-content-docs\\site-docs-doc-3-md-225.json","mtime":1580679758090},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580679680066},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\babel-loader\\lib\\index.js","mtime":1580679679898},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js","mtime":1580679679057},{"path":"C:\\Users\\theod\\OneDrive\\Documents\\GitHub\\standardnotes\\newdocs\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js","mtime":1580679679084}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iQzpcXFVzZXJzXFx0aGVvZFxcT25lRHJpdmVcXERvY3VtZW50c1xcR2l0SHViXFxzdGFuZGFyZG5vdGVzXFxuZXdkb2NzXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSJDOlxcVXNlcnNcXHRoZW9kXFxPbmVEcml2ZVxcRG9jdW1lbnRzXFxHaXRIdWJcXHN0YW5kYXJkbm90ZXNcXG5ld2RvY3NcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J2RvYzMnLHRpdGxlOidUaGlzIGlzIERvY3VtZW50IE51bWJlciAzJ307ZXhwb3J0IHZhciBtZXRhZGF0YT17ImlkIjoiZG9jMyIsInRpdGxlIjoiVGhpcyBpcyBEb2N1bWVudCBOdW1iZXIgMyIsImRlc2NyaXB0aW9uIjoiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gSW4gYWMgZXVpc21vZCBvZGlvLCBldSBjb25zZXF1YXQgZHVpLiBOdWxsYW0gbW9sZXN0aWUgY29uc2VjdGV0dXIgcmlzdXMgaWQgaW1wZXJkaWV0LiBQcm9pbiBzb2RhbGVzIG9ybmFyZSB0dXJwaXMsIG5vbiBtb2xsaXMgbWFzc2EgdWx0cmljaWVzIGlkLiBOYW0gYXQgbmliaCBzY2VsZXJpc3F1ZSwgZmV1Z2lhdCBhbnRlIG5vbiwgZGFwaWJ1cyB0b3J0b3IuIFZpdmFtdXMgdm9sdXRwYXQgZGlhbSBxdWlzIHRlbGx1cyBlbGVtZW50dW0gYmliZW5kdW0uIFByYWVzZW50IHNlbXBlciBncmF2aWRhIHZlbGl0IHF1aXMgYWxpcXVhbS4gRXRpYW0gaW4gY3Vyc3VzIG5lcXVlLiBOYW0gbGVjdHVzIGxpZ3VsYSwgbWFsZXN1YWRhIGV0IG1hdXJpcyBhLCBiaWJlbmR1bSBmYXVjaWJ1cyBtaS4gUGhhc2VsbHVzIHV0IGludGVyZHVtIGZlbGlzLiBQaGFzZWxsdXMgaW4gb2RpbyBwdWx2aW5hciwgcG9ydHRpdG9yIHVybmEgZWdldCwgZnJpbmdpbGxhIGxlY3R1cy4gQWxpcXVhbSBzb2xsaWNpdHVkaW4gZXN0IGVyb3MuIE1hdXJpcyBjb25zZWN0ZXR1ciBxdWFtIHZpdGFlIG1hdXJpcyBpbnRlcmR1bSBoZW5kcmVyaXQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuXHIiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzXFxkb2MzLm1kIiwicGVybWFsaW5rIjoiL25ld2RvY3MvZG9jcy9kb2MzIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9zdGFuZGFyZG5vdGVzL25ld2RvY3MvZG9jcy9kb2MzLm1kIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJEb2N1bWVudCBOdW1iZXIgMiIsInBlcm1hbGluayI6Ii9uZXdkb2NzL2RvY3MvZG9jMiJ9LCJuZXh0Ijp7InRpdGxlIjoiUG93ZXJlZCBieSBNRFgiLCJwZXJtYWxpbmsiOiIvbmV3ZG9jcy9kb2NzL21keCJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCB2YXIgcmlnaHRUb2M9W107dmFyIG1ha2VTaG9ydGNvZGU9ZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKXtyZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307fTt2YXIgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jOnJpZ2h0VG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEluIGFjIGV1aXNtb2Qgb2RpbywgZXUgY29uc2VxdWF0IGR1aS4gTnVsbGFtIG1vbGVzdGllIGNvbnNlY3RldHVyIHJpc3VzIGlkIGltcGVyZGlldC4gUHJvaW4gc29kYWxlcyBvcm5hcmUgdHVycGlzLCBub24gbW9sbGlzIG1hc3NhIHVsdHJpY2llcyBpZC4gTmFtIGF0IG5pYmggc2NlbGVyaXNxdWUsIGZldWdpYXQgYW50ZSBub24sIGRhcGlidXMgdG9ydG9yLiBWaXZhbXVzIHZvbHV0cGF0IGRpYW0gcXVpcyB0ZWxsdXMgZWxlbWVudHVtIGJpYmVuZHVtLiBQcmFlc2VudCBzZW1wZXIgZ3JhdmlkYSB2ZWxpdCBxdWlzIGFsaXF1YW0uIEV0aWFtIGluIGN1cnN1cyBuZXF1ZS4gTmFtIGxlY3R1cyBsaWd1bGEsIG1hbGVzdWFkYSBldCBtYXVyaXMgYSwgYmliZW5kdW0gZmF1Y2lidXMgbWkuIFBoYXNlbGx1cyB1dCBpbnRlcmR1bSBmZWxpcy4gUGhhc2VsbHVzIGluIG9kaW8gcHVsdmluYXIsIHBvcnR0aXRvciB1cm5hIGVnZXQsIGZyaW5naWxsYSBsZWN0dXMuIEFsaXF1YW0gc29sbGljaXR1ZGluIGVzdCBlcm9zLiBNYXVyaXMgY29uc2VjdGV0dXIgcXVhbSB2aXRhZSBtYXVyaXMgaW50ZXJkdW0gaGVuZHJlcml0LiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiIpLG1keCgicCIsbnVsbCwiRHVpcyBldCBlZ2VzdGFzIGxpYmVybywgaW1wZXJkaWV0IGZhdWNpYnVzIGlwc3VtLiBTZWQgcG9zdWVyZSBlZ2V0IHVybmEgdmVsIGZldWdpYXQuIFZpdmFtdXMgYSBhcmN1IHNhZ2l0dGlzLCBmZXJtZW50dW0gdXJuYSBkYXBpYnVzLCBjb25ndWUgbGVjdHVzLiBGdXNjZSB2dWxwdXRhdGUgcG9ydHRpdG9yIG5pc2wsIGFjIGN1cnN1cyBlbGl0IHZvbHV0cGF0IHZpdGFlLiBOdWxsYW0gdml0YWUgaXBzdW0gZWdlc3RhcywgY29udmFsbGlzIHF1YW0gbm9uLCBwb3J0YSBuaWJoLiBNb3JiaSBncmF2aWRhIGVyYXQgbmVjIG5lcXVlIGJpYmVuZHVtLCBldSBwZWxsZW50ZXNxdWUgdmVsaXQgcG9zdWVyZS4gRnVzY2UgYWxpcXVhbSBlcmF0IGV1IG1hc3NhIGVsZWlmZW5kIHRyaXN0aXF1ZS4iKSxtZHgoInAiLG51bGwsIlNlZCBjb25zZXF1YXQgc29sbGljaXR1ZGluIGlwc3VtIGVnZXQgdGVtcHVzLiBJbnRlZ2VyIGEgYWxpcXVldCB2ZWxpdC4gSW4ganVzdG8gbmliaCwgcGVsbGVudGVzcXVlIG5vbiBzdXNjaXBpdCBlZ2V0LCBncmF2aWRhIHZlbCBsYWN1cy4gRG9uZWMgb2RpbyBhbnRlLCBtYWxlc3VhZGEgaW4gbWFzc2EgcXVpcywgcGhhcmV0cmEgdHJpc3RpcXVlIGxpZ3VsYS4gRG9uZWMgZXJvcyBlc3QsIHRyaXN0aXF1ZSBlZ2V0IGZpbmlidXMgcXVpcywgc2VtcGVyIG5vbiBuaXNsLiBWaXZhbXVzIGV0IGVsaXQgbmVjIGVuaW0gb3JuYXJlIHBsYWNlcmF0LiBTZWQgcG9zdWVyZSBvZGlvIGEgZWxpdCBjdXJzdXMgc2FnaXR0aXMuIiksbWR4KCJwIixudWxsLCJQaGFzZWxsdXMgZmV1Z2lhdCBwdXJ1cyBldSB0b3J0b3IgdWx0cmljZXMgZmluaWJ1cy4gVXQgbGliZXJvIG5pYmgsIGxvYm9ydGlzIGV0IGxpYmVybyBuZWMsIGRhcGlidXMgcG9zdWVyZSBlcm9zLiBTZWQgc2FnaXR0aXMgZXVpc21vZCBqdXN0byBhdCBjb25zZWN0ZXR1ci4gTnVsbGEgZmluaWJ1cyBsaWJlcm8gcGxhY2VyYXQsIGN1cnN1cyBzYXBpZW4gYXQsIGVsZWlmZW5kIGxpZ3VsYS4gVml2YW11cyBlbGl0IG5pc2wsIGhlbmRyZXJpdCBhYyBuaWJoIGV1LCB1bHRyaWNlcyB0ZW1wdXMgZHVpLiBOYW0gdGVsbHVzIG5lcXVlLCBjb21tb2RvIG5vbiByaG9uY3VzIGV1LCBncmF2aWRhIGluIHJpc3VzLiBOdWxsYW0gaWQgaWFjdWxpcyB0b3J0b3IuIiksbWR4KCJwIixudWxsLCJOdWxsYW0gYXQgb2RpbyBpbiBzZW0gdmFyaXVzIHRlbXBvciBzaXQgYW1ldCB2ZWwgbG9yZW0uIEV0aWFtIGV1IGhlbmRyZXJpdCBuaXNsLiBGdXNjZSBuaWJoIG1hdXJpcywgdnVscHV0YXRlIHNpdCBhbWV0IGV4IHZpdGFlLCBjb25ndWUgcmhvbmN1cyBuaXNsLiBTZWQgZWdldCB0ZWxsdXMgcHVydXMuIE51bGxhbSB0ZW1wdXMgY29tbW9kbyBlcmF0IHV0IHRyaXN0aXF1ZS4gQ3JhcyBhY2N1bXNhbiBtYXNzYSBzaXQgYW1ldCBqdXN0byBjb25zZXF1YXQgZWxlaWZlbmQuIEludGVnZXIgc2NlbGVyaXNxdWUgdml0YWUgdGVsbHVzIGlkIGNvbnNlY3RldHVyLiIpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}